1. write a blog on difference between http1.1 vs http2

Multiplexing: HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it. In contrast, HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource

2. Write a blog about objects and its internal representation in Javascript

Introduction:
JavaScript, the versatile programming language, is renowned for its object-oriented nature. Objects play a fundamental role in JavaScript, enabling developers to create complex data structures and organize their code. Behind the scenes, JavaScript employs a unique internal representation of objects, which is crucial to understand for effective programming. In this blog post, we'll delve into the internal representation of objects in JavaScript, unraveling the mechanisms that power this key feature of the language.

Object Basics:
In JavaScript, objects are collections of key-value pairs, where keys are strings (or symbols) and values can be of any data type. Objects can be created using object literals, constructor functions, or the class keyword introduced in ECMAScript 2015. Let's explore the fundamental aspects of objects before diving into their internal representation.

The Hidden Class:
Behind the scenes, JavaScript engines utilize a concept called the "hidden class" to optimize object property access. When an object is created, the engine assigns it a hidden class, which serves as a blueprint for the object's properties and their order. As properties are added or removed from the object, the hidden class is updated accordingly.

Property Lookup:
JavaScript objects allow for dynamic property addition and removal, which can potentially impact performance. However, by employing hidden classes, JavaScript engines optimize property lookup. When accessing a property, the engine follows a process that involves checking the object's hidden class and its associated property offsets, resulting in efficient property access.

Shape Transition:
When an object's shape changes (e.g., adding or removing properties), JavaScript engines perform a shape transition. During this process, the engine creates a new hidden class that reflects the updated shape of the object. Objects with the same shape can be grouped together for efficient property access, enhancing performance.

Hidden Class Caching:
JavaScript engines also implement hidden class caching, a technique that leverages the reusability of hidden classes. If a new object matches an existing hidden class, the engine can reuse the cached class, bypassing the costly process of creating a new hidden class.